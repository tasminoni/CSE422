# -*- coding: utf-8 -*-
"""21201532_Tasmin Ahmed Oni_CSE422_11_Lab_Assignment1_Fall2024.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZcVoZV848-7t7QM1tVpxUWDeYxm3IaLs
"""

from queue import PriorityQueue

def input_analysis(input_file):
    h_value_from_input = {}
    d_value_from_input = {}

    task_input = open(input_file, "r")
    for line in task_input:
        making_parts = line.split()
        all_the_city_from_input = making_parts[0]
        h_value_from_input[all_the_city_from_input] = int(making_parts[1])
        neighbors_from_input = []
        for i in range(2, len(making_parts), 2):
            neighbor_all_the_city_from_input = making_parts[i]
            distance = int(making_parts[i + 1])
            neighbors_from_input.append((neighbor_all_the_city_from_input, distance))
        d_value_from_input[all_the_city_from_input] = neighbors_from_input

    task_input.close()

    return d_value_from_input, h_value_from_input


def a_star_search(d_value_from_input, h_value_from_input, starting, final_goal):
    making_a_queue = PriorityQueue()
    making_a_queue.put((h_value_from_input[starting], 0, starting, [starting]))  # (value_of_f(n), value_of_g(n), all_the_city_from_input, path)
    visited_nodes = {}

    while not making_a_queue.empty():
        f, g, current_node, path = making_a_queue.get()

        if current_node == final_goal:
            return path, g

        if current_node not in visited_nodes or visited_nodes[current_node] > g:
            visited_nodes[current_node] = g

        for neighbor, travel_cost in d_value_from_input.get(current_node, []):
            new_g = g + travel_cost
            new_f = new_g + h_value_from_input[neighbor]
            making_a_queue.put((new_f, new_g, neighbor, path + [neighbor]))

    return None, float('inf')  # If there is no valid path then it should return distance is infinitely large


d_value_from_input, h_value_from_input = input_analysis("input.txt")
path, total_distance = a_star_search(d_value_from_input, h_value_from_input, 'Arad', 'Bucharest')

#print(d_value_from_input)
#print(h_value_from_input)

print("Path:", " -> ".join(path))
print("Total distance:", total_distance, "km")

#additional for writting in output file
output_file=open("output.txt","w")
if path:
    output_file.write(f"Path: {' -> '.join(path)}\n")
    output_file.write(f"Total distance: {total_distance} km\n")
else:
    output_file.write("No path found.\n")

output_file.close()

