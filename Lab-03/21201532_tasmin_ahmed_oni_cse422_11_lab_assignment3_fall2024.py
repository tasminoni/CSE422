# -*- coding: utf-8 -*-
"""21201532_Tasmin Ahmed Oni_CSE422_11_Lab_Assignment3_Fall2024.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13n65IB_jfLOm93tgJtx9foKTfWsJy9_g
"""

import math
import random


def alpha_beta_pruning_1(depth, node_index, maximizing_player, values, alpha, beta, max_depth=5):
    if(depth == max_depth or node_index >= len(values)):
        return values[node_index]


    if(maximizing_player):
        max_eval = -math.inf

        for i in range(2):
            eval = alpha_beta_pruning_1(depth + 1, node_index * 2 + i, False, values, alpha, beta)
            max_eval = max(eval, max_eval)
            alpha = max(alpha, max_eval)

            if(beta <= alpha):
                break

        return max_eval


    else:
        min_eval = math.inf

        for i in range(2):
            eval = alpha_beta_pruning_1(depth + 1, node_index * 2 + i, True, values, alpha, beta)
            min_eval = min(eval, min_eval)
            beta = min(beta, min_eval)

            if(beta <= alpha):
                break


        return min_eval


def alpha_beta_pruning_2(depth, node_index, maximizing_player, values, alpha, beta, max_depth = 3):
    if(depth == max_depth):
        return values[node_index]


    if(maximizing_player):
        max_eval = -math.inf

        for i in range(2):
            eval = alpha_beta_pruning_2(depth + 1, node_index * 2 + i, False, values, alpha, beta)
            max_eval = max(eval, max_eval)
            alpha = max(alpha, max_eval)

            if(beta <= alpha):
                break

        return max_eval


    else:
        min_eval = math.inf

        for i in range(2):
            eval = alpha_beta_pruning_2(depth + 1, node_index * 2 + i, True, values, alpha, beta)
            min_eval = min(eval, min_eval)
            beta = min(beta, min_eval)

            if(beta <= alpha):
                break


        return min_eval


def populate_values(max_depth):
    chosen_value = [-1, 1]
    values = []
    for i in range(2 ** max_depth):
        values.append(random.choice(chosen_value))

    return values

#task-01
def mortal_combat(round, max_depth = 5):
    winner = []
    current_player = int(input("Enter the player. 0: Scorpion and 1:Sub-zero :"))

    for i in range(round):
        values = populate_values(max_depth)
        won = alpha_beta_pruning_1(0, 0, current_player, values, -math.inf, math.inf)

        if(won == 1):
            winner.append("Sub-Zero")

        else:
            winner.append("Scorpion")


        if(current_player == 0):
            current_player = 1

        else:
            current_player = 0

    scorpion_win = winner.count("Scorpion")
    sub_zero_win = winner.count("Sub-Zero")

    if(scorpion_win == sub_zero_win):
        print("Draw")
    elif(scorpion_win > sub_zero_win):
        print("Game Winner: Scorpion")

    else:
        print("Game Winner: Sub-Zero")

    print(f"Total Rounds Played: {round}")
    for i in range(round):
        print(f"Winner of Round {i + 1}: {winner[i]}")


mortal_combat(3)

#task-02
def pacman_game(cost):
    game_values = [3, 6, 2, 3, 7, 1, 2, 0]

    minimax_without_magic = alpha_beta_pruning_2(0, 0, True, game_values, -math.inf, math.inf)

    minimax_with_magic_left = max(
        min(max(game_values[0], game_values[1]), max(game_values[2], game_values[3])),
        max(game_values[:4])
    ) - cost

    minimax_with_magic_right = max(
        min(max(game_values[4], game_values[5]), max(game_values[6], game_values[7])),
        max(game_values[4:])
    ) - cost

    if minimax_with_magic_left > minimax_without_magic and minimax_with_magic_left >= minimax_with_magic_right:
        print(f"The new minimax value is {minimax_with_magic_left}. Pacman goes left and uses dark magic.")

    elif minimax_with_magic_right > minimax_without_magic:
        print(f"The new minimax value is {minimax_with_magic_right}. Pacman goes right and uses dark magic.")

    else:
        print(f"The new minimax value is {minimax_without_magic}. Pacman does not use dark magic.")

cost_input = int(input("Enter cost: "))
pacman_game(cost_input)

